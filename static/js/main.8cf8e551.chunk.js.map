{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","nameIndex","App","useState","query","setQuery","weather","setWeather","latestSearches","setLatestSearches","nameFixer","name","finalName","fixedName","split","map","x","toLowerCase","toUpperCase","console","log","clickedItem","value","fetch","then","res","json","result","useEffect","className","main","temp","type","placeholder","onChange","e","target","onKeyPress","evt","key","message","Object","values","includes","localStorage","setItem","nameAssigner","id","onClick","event","innerHTML","search0","search1","search2","search3","search4","clear","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cf8e551.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst api = {\n  key: \"cf12fd4e2e2227d274067af029af9c48\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nvar nameIndex = 0;\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [latestSearches, setLatestSearches] = useState({});\n  useEffect(() => {\n    console.log(`The latest searches are ${latestSearches}`)\n    // console.log(latestSearches.includes('Kilkis'))\n    console.log(latestSearches)\n    console.log(typeof latestSearches)\n  }, [latestSearches])\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result)\n          setQuery('')\n          if (!result.message) {\n            // console.log(\"Yparxei\")\n            if (!Object.values(latestSearches).includes(nameFixer(query))) {\n              localStorage.setItem(nameAssigner(), nameFixer(query))\n              setLatestSearches(Object.values(localStorage))\n            }\n          }\n        });\n    }\n  }\n\n  function nameFixer(name) {\n    var finalName = \"\"\n    var fixedName = name.split(\"\");\n    fixedName = fixedName.map(x => x.toLowerCase())\n    fixedName[0] = fixedName[0].toUpperCase()\n    for (let letter of fixedName) {\n      finalName += letter\n    }\n    console.log(`The final name is ${finalName}`)\n    return finalName\n  }\n\n  function nameAssigner() {\n    if (nameIndex !== 4) {\n      let name = `search${nameIndex}`;\n      nameIndex += 1\n\n      // console.log(name)\n      return name;\n    } else {\n      let name = `search${nameIndex}`\n      nameIndex = 0\n      // console.log(name)\n      return name;\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  function clearCache() {\n    localStorage.clear()\n    setLatestSearches(\"\")\n  }\n\n  function clickedItem(value) {\n    // setQuery(value);\n    fetch(`${api.base}weather?q=${value}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result)\n        setQuery('')\n      });\n  }\n  // const item1 = document.querySelector('#item1').addEventListener(\"click\", () => console.log('Clicked'))\n  // const myList = document.querySelector(\"#searchList\")\n  // myList.addEventListener(\"click\", () => console.log(\"Clicked\"))\n\n\n  return (\n    <div className={(typeof weather.main != 'undefined')\n      ? ((weather.main.temp > 16)\n        ? 'app warm'\n        : 'app')\n      : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        <div className='details'>\n          <div className='searches'>\n            <ul id='searchList'>\n              <li id='item1' onClick={(event) => clickedItem(event.target.innerHTML)}>{localStorage.search0}</li>\n              <li id='item2' onClick={(event) => clickedItem(event.target.innerHTML)}>{localStorage.search1}</li>\n              <li id='item3' onClick={(event) => clickedItem(event.target.innerHTML)}>{localStorage.search2}</li>\n              <li id='item4' onClick={(event) => clickedItem(event.target.innerHTML)}>{localStorage.search3}</li>\n              <li id='item5' onClick={(event) => clickedItem(event.target.innerHTML)}>{localStorage.search4}</li>\n            </ul>\n            <div>\n              <button id='clear-button' onClick={clearCache}>Clear searches</button>\n            </div>\n          </div>\n          <div className='info-container'>\n            {(typeof weather.main != 'undefined') ? (\n              <div className='info'>\n                <div className=\"location-box\">\n                  <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                  <div className=\"date\">{dateBuilder(new Date())}</div>\n                </div>\n                <div className=\"weather-box\">\n                  <div className=\"temp\">\n                    {Math.round(weather.main.temp)}Â°C\n                  </div>\n                  <div className=\"weather\"> {weather[\"weather\"][0][\"description\"]} </div>\n                </div>\n              </div>\n            ) : ('')}\n          </div>\n          <div>\n          </div>\n\n        </div>\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}